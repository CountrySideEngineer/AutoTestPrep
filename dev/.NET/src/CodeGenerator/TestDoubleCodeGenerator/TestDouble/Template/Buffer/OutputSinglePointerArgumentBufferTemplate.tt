<#@ template language="C#" 
	inherits="PointerArgumentBufferTemplate" 
#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="TestReader.Model" #>
<#@ import namespace="TestDoubleCodeGenerator.Rule" #>
<#@ import namespace="Logger" #>
<#	Log.TRACE(); #>
<# base.TransformText(); #>
<#
	string returnDataType = Target.DataType;
	string returnBuffName = NameRule.SinglePointerArgumentReturnValueBuffer(Function, Target);
	string returnBuffDec = NameRule.DeclareFormat(returnDataType, returnBuffName);
	string returnBuffDecCode = $"{returnBuffDec}[{NameRule.BufferSize1MacroName}][{NameRule.BufferSize2MacroName}];";

	Log.DEBUG($"{nameof(returnBuffDecCode),16} = \"{returnBuffDecCode}\"");
#>
<#= returnBuffDecCode #>
<# 
	string sizeDataType = "long";
	string sizeBuffName = NameRule.SinglePointerArgumentReturnValueSizeBuffer(Function, Target);
	string sizeBuffDec = NameRule.DeclareFormat(sizeDataType, sizeBuffName);
	string sizeBuffDecCode = $"{sizeBuffDec}[{NameRule.BufferSize1MacroName}];";

	Log.DEBUG($"{nameof(sizeBuffDecCode),16} = \"{sizeBuffDecCode}\"");
#>
<#= sizeBuffDecCode #>
