<#@ template language="C#"
	inherits="ArgumentBufferTemplate"
#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="TestReader.Model" #>
<#@ import namespace="TestDoubleCodeGenerator.Rule" #>
<#@ import namespace="Logger" #>
<#
	string	calledCountBuffName = NameRule.CalledCount((Function)Function);
	string	argumentBuffName = NameRule.ArgumentBuffer(Function, Target);
	string	argumentName = Target.Name;
	string	argumentValueBuffName = NameRule.SinglePointerArgumentValueBuffer(Function, Target);
	string	argumentValueSizeBuffName = NameRule.SinglePointerArgumentValueSizeBuffer(Function, Target);
	string	argumentReturnValueBuffName = NameRule.SinglePointerArgumentReturnValueBuffer(Function, Target);
	string	argumentReturnValueSizeBuffName = NameRule.SinglePointerArgumentReturnValueSizeBuffer(Function, Target);

	Log.DEBUG($"{nameof(calledCountBuffName), 16} = {calledCountBuffName}");
	Log.DEBUG($"{nameof(argumentBuffName), 16} = {argumentBuffName}");
	Log.DEBUG($"{nameof(argumentName), 16} = {argumentName}");
	Log.DEBUG($"{nameof(argumentValueBuffName), 16} = {argumentValueBuffName}");
	Log.DEBUG($"{nameof(argumentValueSizeBuffName), 16} = {argumentValueSizeBuffName}");
	Log.DEBUG($"{nameof(argumentReturnValueBuffName), 16} = {argumentReturnValueBuffName}");
	Log.DEBUG($"{nameof(argumentReturnValueSizeBuffName), 16} = {argumentReturnValueSizeBuffName}");
#>
<# Log.TRACE(); #>
<# base.TransformText(); #>
	for (int index = 0; index < <#= argumentValueSizeBuffName #>[<#= calledCountBuffName #>]; index++) {
		<#= argumentValueBuffName #>[<#= calledCountBuffName #>][index] = <#= argumentName #>[index];
	}
	for (int index = 0; index < <#= argumentReturnValueSizeBuffName #>[<#= calledCountBuffName #>]; index++) {
		<#= argumentName #>[index] = <#= argumentReturnValueBuffName #>[<#= calledCountBuffName #>][index];
	}
